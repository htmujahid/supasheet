-- Custom types
create type supasheet.app_permission as enum ('resource:accounts:select', 'resource:accounts:update', 'resource:accounts:insert', 'resource:accounts:delete');
create type supasheet.app_role as enum ('x-admin', 'user');

-- USER ROLES
create table supasheet.user_roles (
  id        bigint generated by default as identity primary key,
  account_id   uuid references supasheet.accounts on delete cascade not null,
  role      supasheet.app_role not null,
  unique (account_id, role)
);

alter table supasheet.user_roles enable row level security;

revoke all on table supasheet.user_roles from authenticated, service_role;

grant select, insert, update, delete on table supasheet.user_roles to authenticated, service_role;

-- ROLE PERMISSIONS
create table supasheet.role_permissions (
  id           bigint generated by default as identity primary key,
  role         supasheet.app_role not null,
  permission   supasheet.app_permission not null,
  unique (role, permission)
);

alter table supasheet.role_permissions enable row level security;

revoke all on table supasheet.role_permissions from authenticated, service_role;

grant select, insert, update, delete on table supasheet.role_permissions to authenticated, service_role;

-- Performance indexes
create index idx_user_roles_account_id on supasheet.user_roles (account_id);
create index idx_user_roles_role on supasheet.user_roles (role);
create index idx_role_permissions_role on supasheet.role_permissions (role);
create index idx_role_permissions_permission on supasheet.role_permissions (permission);
create index idx_role_permissions_role_permission on supasheet.role_permissions (role, permission);

create or replace function supasheet.has_permission(
  requested_permission supasheet.app_permission
)
returns boolean as $$
begin
  return exists (
    select 1
    from supasheet.role_permissions rp
    inner join supasheet.user_roles ur on rp.role = ur.role
    where ur.account_id = auth.uid()
      and rp.permission = requested_permission
  );
end;
$$ language plpgsql stable security definer set search_path = '';

grant execute on function supasheet.has_permission(supasheet.app_permission) to authenticated, service_role;

create or replace function supasheet.has_role(
  requested_role supasheet.app_role
)
returns boolean as $$
begin
  return exists (
    select 1 from supasheet.user_roles 
    where account_id = auth.uid() and role = requested_role
  );
end;
$$ language plpgsql stable security definer set search_path = '';

create index on supasheet.user_roles using btree (account_id);

grant execute on function supasheet.has_role(supasheet.app_role) to authenticated, service_role;

create policy "User can view their own role" on supasheet.user_roles for select using (
  (select auth.uid()) = account_id
);

create policy "User can view their own role permissions" on supasheet.role_permissions for select using (
  (select (supasheet.has_role(role)))
);

-- create policy "Enable read access for authorized users"
-- on "supasheet"."resources"
-- as PERMISSIVE
-- for SELECT
-- to authenticated
-- using (
--   (select (supasheet.has_permission(id::supasheet.app_permission)))
-- );

create or replace function supasheet.new_account_created_setup() 
returns trigger 
language plpgsql 
as $$
begin
  insert into supasheet.user_roles (account_id, role) values (new.id, 'user');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_account_created
    after insert
    on supasheet.accounts
    for each row
execute procedure supasheet.new_account_created_setup();
